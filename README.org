#+TITLE:Graven Image

#+begin_quote
Thou shalt not make unto thee any graven image, or any likeness of any thing that is in heaven above, or that is in the earth beneath, or that is in the water under the earth.
#+end_quote

Graven Image is a Common Lisp portability library for better
interaction and debugging of a running Lisp image. One can inspect and
debug all the things under heaven and [[https://www.corecursive.com/lisp-in-space-with-ron-garret/][above it]]—all in their own
REPL-resident Lisp image!

Graven Image reuses compiler internals to improve/redefine the
existing standard functions. This "improvement" often comes at a cost
of changing the API of a function (for better customizability) or
making it slightly less reliable (due to unstable, compiler-internal,
or otherwise hacky implementation).

* Getting started

Clone the Git repository:
#+begin_src sh
  git clone --recursive https://github.com/aartaka/graven-image ~/common-lisp/
#+end_src

And then load ~:graven-image~ in the REPL:
#+begin_src lisp
  (asdf:load-system :graven-image)
  ;; or, if you use Quicklisp
  (ql:quickload :graven-image)
#+end_src

Then, if you want to have all the Graven Image star functions
(=apropos*=, =function-lambda-expression*= etc.) in =:common-lisp=
package, then just load =:graven-image/import=.

And if you want the default CL constructs replaced by Graven Image
ones, then load =:graven-image/cl= and =cl:apropos= will magically
become more useful :D

* Enhanced functions (mostly from ANSI CL [[https://cl-community-spec.github.io/pages/Debugging-Utilities.html][Debugging Utilities]] chapter)

The functions that Graven Image exposes come in two flavors:
- Safely =:use=-able star-appended functions (i.e. =describe*= instead of
  =describe=)—in =graven-image= system.
- Functions shadowing CL symbols in =graven-image/cl= system.

All of the functions exposed by Graven Image are generics, so one can
easily define =:around= and other qualified methods for them.

** =y-or-n-p*=, =yes-or-no-p*= (generic functions)

Signature:
#+begin_src lisp
y-or-n-p* &optional control &rest arguments => generalized-boolean
yes-or-no-p* &optional control &rest arguments => generalized-boolean
#+end_src


Improvements are:
- Both functions accept options from =graven-image:*yes-or-no-options*=, thus
  allowing for "nope" or "ay" to be valid responses too.
- Both functions mean the same now, because it makes no sense in
  differentiating them.
- No beeps (just define a =:before= method to add beeps if you like 'em).

** =apropos-list*=, =apropos*= (generic functions)

Signature:
#+begin_src lisp
apropos-list* string &optional (package nil) exported-only docs-too => list of symbols
apropos* string &optional (package nil) exported-only docs-too => no values
#+end_src

=apropos-list*= now allows listing exported symbols only (with
=exported-only=), which was a non-portable privilege of SBCL/Allegro
until now. Search over docs (more intuitive for =apropos(-list)*= than
mere name search) is possible with =docs-too=.

Based on this foundation, =apropos*= lists symbols with their types,
values, and documentation, so that implementation-specific formats are
gone for a better and more unified listing:

#+begin_src
> (apropos* :max)
MAX [FUNCTION (NUMBER &REST MORE-NUMBERS) (Return the greatest of its arguments; among EQUALP greatest, return)]
:MAX [SELF-EVALUATING]
...
SB-C::MAXREST
ALEXANDRIA:MAXF [MACRO (Modify-macro for MAX. Sets place designated by the first argument to the)]
...
SB-UNICODE::MAX-MATCH
SB-C::MAX-VOP-TN-REFS [CONSTANT: 256]
SB-LOOP::LOOP-MINIMAX [CLASS]
SB-IMPL::HEAP-MAXIMUM [FUNCTION (HEAP)]
...
#+end_src

** =function-lambda-expression*= (generic function)

Signature:
#+begin_src lisp
function-lambda-expression* function-designator &optional force => list, list, symbol, list
#+end_src

This function tries to read source files, process the definitions of
functions, and build at least a barebones lambda from the arglist and
documentation of the function. So that CL =function-lambda-expression=
returns:
#+begin_src lisp
  (function-lambda-expression #'identity)
  ;; => NIL, T, IDENTITY
  (function-lambda-expression #'print-object)
  ;; => NIL, T, PRINT-OBJECT
#+end_src

While the new Graven Image =function-lambda-expression= now returns:
#+begin_src lisp
  (function-lambda-expression* #'idenitity)
  ;; => (LAMBDA (THING) "This function simply returns what was passed to it." THING),
  ;;    NIL, IDENTITY, (FUNCTION (T) (VALUES T &OPTIONAL))
  (function-lambda-expression* #'print-object t) ; Notice the T for FORCE, to build a dummy lambda.
  ;; => (LAMBDA (SB-PCL::OBJECT STREAM)), NIL, PRINT-OBJECT, (FUNCTION (T T) *)
#+end_src

Which means:
- =identity= is actually not a closure, and has a reliable source!
- =print-object= is a generic and thus is not really inspectable, so
  we build a dummy lambda for it when =force= argument is provided.
  - This might be a questionable choice, but it at least allows us to
    get function arglists from =function-lambda-expression= in a
    portable-ish way. The standard doesn't provide us with much ways
    to know an arglist of a function beside this.

*** Return values

Things that =function-lambda-expression*= now returns are:
- Lambda expression.
  - For lambda functions, their source.
  - For regular functions, their =defun= turned into a =lambda=.
  - For anything else, a constructed empty =(lambda (arglist...) documentation nil)=.
  - Or even, in some exceptional cases, NIL.
- Whether the thing is a closure
  - If it is, might return an alist of the actual closed-over values,
    whenever accessible (not for all implementations).
  - If it's not, returns NIL.
- Function name. Mostly falls back to the standard
  =function-lambda-expression=, but also inspects
  implementation-specific function objects, if necessary.
- Function type, whenever accessible.

*** Helpers

Based on these new features of =function-lambda-expression*=, here are
some Graven Image-specific helpers:
- =function-lambda-list*= :: Get the lambda list of a function.
- =function-name*= :: Get the name of a function.
- =function-type*= :: Get its ftype.

#+begin_src lisp
function-lambda-list* function => lambda-list
function-name* function => name
function-type* function => ftype
#+end_src


** =time*= (macro)

Signature:
#+begin_src lisp
time* &rest forms => values &rest return-values
#+end_src

The improved =time*= from Graven Image reuses as much
implementation-specific APIs as possible, with the predictable output
format.

And it also allows providing several forms, yay!

Most of this macro power relies on the power of:

*** =with-time*= (macro)

Signature:
#+begin_src lisp
with-time* (&rest time-keywords) (&rest multiple-value-args) form &body body
#+end_src


As the implementation detail of =time*=, =with-time*= allows to get
the timing data for interactive querying. =time-keywords= allow
=&key=-matching the timing data (like =:gc= time or bytes
=:allocated=) for processing in the body. While =multiple-value-args=
allow matching against the return values of the =form=. So we get best
of the both worlds: timing data and return values. This flexibility
enables =time*=, with its requirements of printing the data and
returning the original values at the same time.

** =describe*= (generic function)

Signature:
#+begin_src lisp
describe* object &optional (stream t) ignore-methods
#+end_src

Describes the =object= to the stream, but this time with portable
format of description (determined by =graven-image:description*= and
specified for many standard classes) and with predictable set of
properties (=graven-image:properties*=). In Graven Image, both
=describe= and =inspect= have the same format and the same set of
properties.

As a homage to the original =describe=, Graven Image one respects the
=describe-object= methods defined for user classes. If one needs to
ignore these too, passing T to =ignore-methods= should be enough to
get consistent Graven Image descriptions for all the objects.

*** =graven-image:properties*= (generic function)

Signature:
#+begin_src lisp
properties* object &key strip-null &allow-other-keys
#+end_src

Returns an undotted alist of properties for the =object=. Custom
properties provided by Graven Image are named with keywords, while the
implementation-specific ones use whatever the implementation
uses. Arrays and hash-tables are inlined into properties to allow
indexing these right from the inspector.

*** =graven-image:description*= (generic function)

Signature:
#+begin_src lisp
description* =object &optional stream
#+end_src

Concise and informative description of =object= to the
=stream=. Useful information from most of the implementations
tested—united into one description header.
** =inspect*= (generic function)

Signature:
#+begin_src lisp
inspect* object &optional strip-null
#+end_src

New'n'shiny =inspect*= has:
- Most commands found in other implementation, with familiar names.
- Abbreviations like =H -> HELP= (inspired by SBCL).
- Ability to set object properties with =(:set key value)= command
  (inspired by CCL).
- Baked-in pagination with ways to scroll it (=:next-page=,
  =:previous-page=, =:home=) and change it (=:length=).
- Property indexing by both integer indices and property names (with
  abbreviations for them too!).
- Ability to ignore =nil= properties with =strip-null= argument
  (inspired by SBCL). On by default!
- And the ability to evaluate arbitrary expressions (with =:evaluate=
  command or simply by inputting something that doesn't match any
  command).

And here's a help menu of the new =inspect*= (in this case, inspecting
=*readtable*=), just to get you teased:
#+begin_quote
This is an interactive interface for %READTABLE-SYMBOL-PREFERENCE
Available commands are:
QUIT                Exit the interface.
EXIT                Exit the interface.
LENGTH              Change the page size.
WIDTH               Change the page size.
WIDEN               Change the page size.
NEXT-PAGE           Show the next page of fields (if any).
PREVIOUS-PAGE       Show the previous page of fields (if any).
PRINT               Print the current page of fields.
PAGE                Print the current page of fields.
HOME                Scroll back to the first page of fields.
RESET               Scroll back to the first page of fields.
TOP                 Scroll back to the first page of fields.
THIS                Show the currently inspected object.
SELF                Show the currently inspected object.
REDISPLAY           Show the currently inspected object.
SHOW                Show the currently inspected object.
CURRENT             Show the currently inspected object.
AGAIN               Show the currently inspected object.
STANDARD            Print the inspected object readably.
AESTHETIC           Print the inspected object aesthetically.
EVALUATE            Evaluate the EXPRESSION.
UP                  Go up to the previous level of the interface.
POP                 Go up to the previous level of the interface.
BACK                Go up to the previous level of the interface.
?                   Show the instructions for using this interface.
HELP                Show the instructions for using this interface.
SET-FIELD           Set the KEY-ed field to VALUE.
MODIFY-FIELD        Set the KEY-ed field to VALUE.
ISTEP               Inspect the object under KEY.
INSPECT             Inspect the object under KEY.
SET-FIELD           Set the KEY-ed field to VALUE.
MODIFY-FIELD        Set the KEY-ed field to VALUE.
ISTEP               Inspect the object under KEY.
INSPECT             Inspect the object under KEY.
SET-FIELD           Set the KEY-ed field to VALUE.
MODIFY-FIELD        Set the KEY-ed field to VALUE.
ISTEP               Inspect the object under KEY.
INSPECT             Inspect the object under KEY.
SET-FIELD           Set the KEY-ed field to VALUE.
MODIFY-FIELD        Set the KEY-ed field to VALUE.
ISTEP               Inspect the object under KEY.
INSPECT             Inspect the object under KEY.

Possible inputs are:
- Mere symbols: run one of the commands above, matching the symbol.
  - If there's no matching command, then match against fields.
    - If nothing matches, evaluate the symbol.
- Integer: act on the field indexed by this integer.
  - If there are none, evaluate the integer.
- Any other atom: find the field with this atom as a key.
  - Evaluate it otherwise.
- S-expression: match the list head against commands and fields,
  as above.
  - If the list head does not match anything, evaluate the
    s-expression.
  - Inside this s-expression, you can use the `$' function to fetch
    the list of values under provided keys.
#+end_quote

** =dribble*= (generic function)

Signature:
#+begin_src lisp
dribble* &optional pathname (if-exists :append)
#+end_src

Dribble the REPL session to =pathname=. Unlike the implementation-specific =dribble=, this one formats all of the session as =load=-able Lisp file fully reproducing the session. So all the input forms are printed verbatim, and all the outputs are commented out.

Beware: using any interactive function (like =inspect= etc.) breaks the dribble REPL. But then, it's unlikely one'd want to record interactive session into a dribble file.
** =debugger*= (generic function)

Intended to replace =invoke-debugger=. Somewhat barebones right now. Backtrace inspection is there, but it's a wrapper around =inspect*= on =dissect:environment=, instead of self-sufficient interface.

* Roadmap
- [ ] Add:
  - [X] =inspect*=,
  - [X] =describe*=,
  - [X] =time*=,
  - [ ] =ed*=.
  - [X] =invoke-debugger*=.
- [ ] Improve
  - [X] =dribble=,
    - [ ] Make dribble file prettier, strip off the REPL prompt.
  - [ ] =step=,
  - [ ] =trace= and =untrace=
  - [ ] =documentation=?
  - [ ] =disassemble=?
  - [ ] =room=?
- [ ] Somehow hook into and improve over =*debugger-hook*=?
  - [ ] Not necessary if =invoke-debugger= is re-implemented.
- [ ] Test on more implementations.
- [ ] Maybe add an interactive file manager?
  - Yes, this is beyond the goal of nice portable standard debugging
    facilities that Graven Image pursues. But it kinda is intuitive,
    and most implementations have some form of directory switching and
    other file operations.
