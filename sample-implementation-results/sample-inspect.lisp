Atoms:
(inspect 5)
(inspect #c(1.0 1.3))
(inspect "hello")
(inspect 'hello)
(inspect #\a)
(inspect 3.0d0)
(inspect 3/2)

Aggregate:
(inspect (find-package :cl))
(defclass foo ()
  ((slot-a :initform 5)))
(inspect (make-instance 'foo))
(inspect (make-instance 'error))
(inspect (open #p"~/git/nyxt/source/buffer.lisp"))
(inspect #(1 "hello" #p"path" #c(1 3)))
(inspect #p"~/git/nyxt/source/buffer.lisp")
(inspect (make-random-state))
(inspect (let ((ht (make-hash-table :test #'equal)))
  (setf (gethash #c(1 3) ht) 1)
  (setf (gethash 1 ht) "hello")
  (setf (gethash "hello" ht) #p"path")
  (setf (gethash #p"path" ht) #c(1 3))
  ht))
(inspect #*1010001)
(inspect (find-class 'standard-class))
(inspect '(1 "hello" #p"~/git/nyxt/source/buffer.lisp" 3.556d0))
(inspect (cons 1 2))

Functions:
(inspect #'identity)
(inspect #'documentation)
(inspect #'(lambda (x) x))
(inspect (funcall #'(lambda (x) #'(lambda () x)) nil))
